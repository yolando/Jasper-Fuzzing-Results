################################################################
#
# This file specifies the options that zzuf.pl will use to fuzz
#	Comments are specified by the "#" character
#
################################################################
# TARGET APPLICATION INVOCATION OPTIONS:
################################################################
[target]
#
# Program to test.  This is the program launched by zzuf:
program=/usr/local/bin/jasper
#
# Name of process to monitor for hangs. This is done by greping the 
# process list, so choose carefully! Usually the same name as "program" 
# will suffice, but in cases where the program is started from a script 
# you may want to list the actual process name.
killprocname=jasper
#
# Command-line arguments that go before the filename:
# Note: by default a space will be added between <preargs> and <seedfile>
# To override this behavior, use nospace_before below.
preargs=-f
#
# Command-line arguments that go after the filename.
# Note: by default a space will be added between <seedfile> and <postargs>
# To override this behavior, use nospace_after below.
postargs=-F /dev/null -T bmp
#
# Filename of seed file to fuzz
seedfile=ie.ras
#
#
# The above parameters will fuzz the following command line:
# convert ie.ppm ie.bmp
#
#
################################################################
# LOCATIONS FOR FUZZ RUN FILES:
# Output files are placed in [outputdir]/[seedfile]
################################################################
[directories]
#
# location of seed files
# The location of the seed files from the fuzzing Linux VM perspective:
seedsdir=/mnt/hgfs/fuzz/seeds
#
# Location of the fuzzing scripts
scriptlocation=/mnt/hgfs/fuzz
#
# location to put crashing testcases. 
# Output files are placed in [outputdir]/[seedfile]
outputdir=/mnt/hgfs/fuzz/crashers
#
# Local directory for fuzzing run mutated files.
localfuzzdir=/home/fuzz/fuzzing
#
#
################################################################
# ZZUF FUZZER PARAMETERS
################################################################
[zzuf]
# Use zzuf's "copy" mode, and also look at exit code for process?
# Default is 0, which uses LD_PRELOAD to mangle input and detect crashes
# If set to 1, then zzuf will determine the file to fuzz, mangle it as
# a randomly-named file in /tmp and then open that with the target app
copymode=0
#
# The zzuf seed number to start with
start_seed=0
#
# How many seeds you want zzuf to try per iteration
seed_interval=500
#
# The maximum zzuf seed to use
max_seed=10000000000
#
################################################################
# VERIFIER PARAMETERS
################################################################
[verifier]
#
# Verify the crashes with the fuzzing machine? (captures stderr, gdb, and 
# valgrind output)
verifycrashers=1
#
# number of backtrace levels to hash for uniqueness:
# set to 0 to only look at the crash memory location for uniqueness 
# determination
backtracelevels=5
#
# keep testcases determined to cause duplicate crashes?
keepduplicates=0
#
# Save cases that cause failed ASSERTs?  If set to 1, then __assert_fail termination, 
# e.g. via assert(), it will be considered a crash.
savefailedasserts=0
#
# Obtain minimally-different crashers using fuzzdiff.py
minimizecrashers=1
#
# At what point (number of bytes different) should the minimizer switch from
# random byte reverting to iterating through each posibility manually.
# The higher the value, the higher the chance of a definitive minimization,
# at the cost of slower performance.  10 seems to work well.
manualcutoff=10
#
################################################################
# APPLICATION TIMEOUTS
################################################################
[timeouts]
#
# maximum zzuf program execution time (seconds):
zzuftimeout=1
#
# maximum time (seconds) that process specified by "killprocname" option 
# can run before it's killed via killproc.sh
killproctimeout=10
#
# maximum time (seconds) to let the program run to capture stderr:
progtimeout=3
#
# maximum time (seconds) to let the program run to capture gdb output:
gdbtimeout=10
#
# maximum time (seconds) to let the program run to capture valgrind output:
valgrindtimeout=30
#
# Set value for the Linux watchdog timer. If /tmp/fuzzing is not touched 
# for a period longer than this value (seconds), then the vm is rebooted 
# by the watchdog.
watchdogtimeout=3600
#
#
#################################################################
