
Program received signal SIGSEGV, Segmentation fault.
0x080781ca in jpc_dec_tilefini (dec=0x80af470, tile=0xb7dd71c8)
    at jpc_dec.c:929
	in jpc_dec.c
#0  0x080781ca in jpc_dec_tilefini (dec=0x80af470, tile=0xb7dd71c8)
    at jpc_dec.c:929
        tcomp = 0x80afb10
        compno = 0
        bandno = 135848828
        rlvlno = 0
        band = 0x0
        rlvl = 0x4800
        prcno = 134682675
        prc = 0x0
        seg = 0x80a0ac8
        cblk = 0xd9
        cblkno = 65497
#1  0x08078c2c in jpc_dec_process_eoc (dec=0x80af470, ms=0x80af4e0)
    at jpc_dec.c:1151
        tileno = 8
        tile = 0xb7dd71c8
#2  0x08076570 in jpc_dec_decode (dec=0x80af470) at jpc_dec.c:390
        ms = 0x80af4e0
        mstabent = 0x80a0b04
        ret = 0
        cstate = 0x80af460
        __PRETTY_FUNCTION__ = "jpc_dec_decode"
#3  0x08076280 in jpc_decode (in=0x80ab308, optstr=0x0) at jpc_dec.c:254
        opts = {debug = 0, maxlyrs = 16384, maxpkts = -1}
        dec = 0x80af470
        image = 0x0
#4  0x0804ad04 in jas_image_decode (in=0x80ab308, fmt=5, optstr=0x0)
    at jas_image.c:372
        fmtinfo = 0x80a25c4
        image = 0x0
#5  0x08049a8c in main (argc=7, argv=0xbffffcd4) at jasper.c:229
        image = 0xb7f8bff4
        cmdopts = 0x80a92d0
        in = 0x80ab308
        out = 0x80ad390
        dectmr = {start = {tv_sec = 1317832305, tv_usec = 271474}, stop = {
            tv_sec = -1208434700, tv_usec = 7}}
        enctmr = {start = {tv_sec = -1207961352, tv_usec = -1208434700}, 
          stop = {tv_sec = -1208695383, tv_usec = -1209564251}}
        dectime = 6.152783780600825e-270
        enctime = -4.5458254427160528e-39
        numcmpts = 134517192
        i = -1209563739
Dump of assembler code from 0x80781aa to 0x80781ea:
0x080781aa <jpc_dec_tilefini+33>:	mov    %eax,-0x14(%ebp)
0x080781ad <jpc_dec_tilefini+36>:	jmp    0x807841a <jpc_dec_tilefini+657>
0x080781b2 <jpc_dec_tilefini+41>:	movl   $0x0,-0x20(%ebp)
0x080781b9 <jpc_dec_tilefini+48>:	mov    -0x14(%ebp),%eax
0x080781bc <jpc_dec_tilefini+51>:	mov    0x18(%eax),%eax
0x080781bf <jpc_dec_tilefini+54>:	mov    %eax,-0x28(%ebp)
0x080781c2 <jpc_dec_tilefini+57>:	jmp    0x80783b4 <jpc_dec_tilefini+555>
0x080781c7 <jpc_dec_tilefini+62>:	mov    -0x28(%ebp),%eax
0x080781ca <jpc_dec_tilefini+65>:	mov    0x4(%eax),%eax
0x080781cd <jpc_dec_tilefini+68>:	test   %eax,%eax
0x080781cf <jpc_dec_tilefini+70>:	je     0x80783a4 <jpc_dec_tilefini+539>
0x080781d5 <jpc_dec_tilefini+76>:	movl   $0x0,-0x1c(%ebp)
0x080781dc <jpc_dec_tilefini+83>:	mov    -0x28(%ebp),%eax
0x080781df <jpc_dec_tilefini+86>:	mov    0x4(%eax),%eax
0x080781e2 <jpc_dec_tilefini+89>:	mov    %eax,-0x24(%ebp)
0x080781e5 <jpc_dec_tilefini+92>:	jmp    0x807837c <jpc_dec_tilefini+499>
End of assembler dump.
eax            0x4800	18432
ecx            0x80b1980	134945152
edx            0xb7f8d3d0	-1208429616
ebx            0xb7f8bff4	-1208434700
esp            0xbffffa90	0xbffffa90
ebp            0xbffffad8	0xbffffad8
esi            0x0	0
edi            0x0	0
eip            0x80781ca	0x80781ca <jpc_dec_tilefini+65>
eflags         0x10206	[ PF IF RF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
st0            0	(raw 0x00000000000000000000)
st1            0	(raw 0x00000000000000000000)
st2            0	(raw 0x00000000000000000000)
st3            0	(raw 0x00000000000000000000)
st4            0	(raw 0x00000000000000000000)
st5            0	(raw 0x00000000000000000000)
st6            8192	(raw 0x400c8000000000000000)
st7            5887.999999999999994226840271949186	(raw 0x400bb7fffffffffffff3)
fctrl          0x37f	895
fstat          0x20	32
ftag           0xffff	65535
fiseg          0x73	115
fioff          0x8068ce5	134647013
foseg          0x7b	123
fooff          0xbfffef28	-1073746136
fop            0x0	0
xmm0           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
  v16_int8 = {0x0, 0x0, 0x0, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 
    0x0, 0x0, 0x0, 0x0}, v8_int16 = {0x0, 0xff00, 0x0, 0x0, 0xff00, 0xffff, 
    0x0, 0x0}, v4_int32 = {0xff000000, 0x0, 0xffffff00, 0x0}, v2_int64 = {
    0xff000000, 0xffffff00}, uint128 = 0x00000000ffffff0000000000ff000000}
xmm1           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
  v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
  uint128 = 0x00000000000000000000000000000000}
xmm2           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
  v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
  uint128 = 0x00000000000000000000000000000000}
xmm3           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
  v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
  uint128 = 0x00000000000000000000000000000000}
xmm4           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
  v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
  uint128 = 0x00000000000000000000000000000000}
xmm5           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
  v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
  uint128 = 0x00000000000000000000000000000000}
xmm6           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
  v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
  uint128 = 0x00000000000000000000000000000000}
xmm7           {v4_float = {0x0, 0x0, 0x0, 0x0}, v2_double = {0x0, 0x0}, 
  v16_int8 = {0x0 <repeats 16 times>}, v8_int16 = {0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x0, 0x0}, v4_int32 = {0x0, 0x0, 0x0, 0x0}, v2_int64 = {0x0, 0x0}, 
  uint128 = 0x00000000000000000000000000000000}
mxcsr          0x1f80	[ IM DM ZM OM UM PM ]
mm0            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
    0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm1            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
    0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm2            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
    0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm3            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
    0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm4            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
    0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm5            {uint64 = 0x0, v2_int32 = {0x0, 0x0}, v4_int16 = {0x0, 0x0, 
    0x0, 0x0}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}}
mm6            {uint64 = 0x8000000000000000, v2_int32 = {0x0, 0x80000000}, 
  v4_int16 = {0x0, 0x0, 0x0, 0x8000}, v8_int8 = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
    0x0, 0x80}}
mm7            {uint64 = 0xb7fffffffffffff3, v2_int32 = {0xfffffff3, 
    0xb7ffffff}, v4_int16 = {0xfff3, 0xffff, 0xffff, 0xb7ff}, v8_int8 = {0xf3, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb7}}
A debugging session is active.

	Inferior 1 [process 14556] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
